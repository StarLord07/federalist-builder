---
############################
#  SHARED

staging-cf: &staging-cf
  CF_API: https://api.fr.cloud.gov
  CF_USERNAME: ((cf-username))
  CF_PASSWORD: ((cf-password))
  CF_ORG: gsa-18f-federalist
  CF_SPACE: staging

node-image: &node-image
  platform: linux
  image_resource:
    type: docker-image
    source:
      repository: node
      tag: 14

cf-image: &cf-image
  platform: linux
  image_resource:
    type: docker-image
    source:
      repository: 18fgsa/concourse-task

test: &test
  - in_parallel:
    - get: redis
      params: {save: true}
    - get: node
      params: {save: true}
  - task: prepare
    config:
      <<: *node-image
      inputs: [name: src]
      outputs: [name: src]
      run:
        dir: src
        path: bash
        args:
          - -c
          - |
            yarn --pure-lockfile
            yarn eslint
  - task: test
    privileged: true
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: karlkfi/concourse-dcind
      inputs:
        - name: src
        - name: redis
        - name: node
      run:
        dir: src
        path: ci/docker/entrypoint.sh
        args:
          - bash
          - -ceux
          - |
            pushd ..
              docker load -i redis/image
              docker tag "$(cat redis/image-id)" "$(cat redis/repository):$(cat redis/tag)"
              docker load -i node/image
              docker tag "$(cat node/image-id)" "$(cat node/repository):$(cat node/tag)"
            popd
            docker-compose -f ci/docker/docker-compose.yml run app app/ci/tasks/test.sh
            docker-compose -f ci/docker/docker-compose.yml down
            docker volume rm $(docker volume ls -q)    


############################
#  JOBS

jobs:

  - name: test
    plan:
      - get: src
        resource: src-all
        trigger: true
        params: {depth: 1}
      - put: gh-status
        inputs: [src]
        params: {state: pending}
      - do: *test
    on_failure:
      in_parallel:
        - put: gh-status
          inputs: [src]
          params: {state: failure}      
        - put: slack
          params:
            text: |
              :x: FAILED: pages builder tests
              ((build-url))
              <@U01J8B463T5> <@U01J0M3E8NS> <@U01J7LKV5MZ>
            channel: ((slack-channel))
            username: ((slack-username))
            icon_url: ((slack-icon-url))
    on_success:
      put: gh-status
      inputs: [src]
      params: {state: success}
      
  - name: test-and-deploy-staging
    plan:
      - get: src
        resource: src-staging
        trigger: true
        params: {depth: 1}
      - put: gh-status
        inputs: [src]
        params: {state: pending}
      - do: *test
      - task: deploy
        config:
          <<: *cf-image
          inputs: [name: src]
          run:
            path: src/ci/tasks/deploy.sh
        params:
          <<: *staging-cf
          CF_APP_NAME: federalist-builder-staging
          CF_MANIFEST: src/.cloudgov/manifest.yml
          CF_VARS_FILE: src/.cloudgov/vars/staging.yml
          CF_PATH: src
        on_failure:
          try:
            task: cancel-api-deployment
            config:
              <<: *cf-image
              inputs: [name: src]
              run:
                path: src/ci/tasks/cancel-deployment.sh
            params:
              <<: *staging-cf
              CF_APP_NAME: federalist-builder-staging
    on_failure:
      in_parallel:
        - put: gh-status
          inputs: [src]
          params: {state: failure}
        - put: slack
          params:
            text: |
              :x: FAILED: pages builder deployment on staging
              ((build-url))
              <@U01J8B463T5> <@U01J0M3E8NS> <@U01J7LKV5MZ>
            channel: ((slack-channel))
            username: ((slack-username))
            icon_url: ((slack-icon-url))
    on_success:
      in_parallel:
        - put: gh-status
          inputs: [src]
          params: {state: success}      
        - put: slack
          params:
            text: |
              :white_check_mark: SUCCESS: Successfully deployed pages builder on staging
              ((build-url))
              <@U01J8B463T5> <@U01J0M3E8NS> <@U01J7LKV5MZ>
            channel: ((slack-channel))
            username: ((slack-username))
            icon_url: ((slack-icon-url))

  - name: nightly-tasks-staging
    plan:
      - get: src
        resource: src-staging
        params: {depth: 1}
      - get: nightly
        trigger: true
      - task: restage
        config:
          <<: *cf-image
          inputs: [name: src]
          run:
            path: src/ci/tasks/restage.sh
        params:
          <<: *staging-cf
          CF_APP_NAME: federalist-builder-staging

############################
#  RESOURCES

resources:

  - name: src-all
    type: git
    icon: github
    source:
      uri: https://github.com/18F/federalist-builder
      tag_filter: "*"

  - name: src-staging
    type: git
    icon: github
    source:
      uri: https://github.com/18F/federalist-builder
      branch: staging

  # - name: src-production
  #   type: git
  #   icon: github
  #   source:
  #     uri: https://github.com/18F/federalist-builder
  #     branch: main

  - name: nightly
    type: time
    source:
      start: 12:00 AM
      stop: 1:00 AM
      location: America/New_York

  - name: redis
    type: docker-image
    source:
      repository: redis
      tag: 5-alpine

  - name: node
    type: docker-image
    source:
      repository: node
      tag: 14

  - name: slack
    type: slack-notification
    source:
      url: ((slack-webhook-url))

  - name: gh-status
    type: cogito
    check_every: 1h
    source:
      owner: 18F
      repo: federalist-builder
      access_token: ((gh-access-token))
      context_prefix: concourse

############################
#  RESOURCE TYPES

resource_types:

  - name: cogito
    type: docker-image
    check_every: 24h
    source:
      repository: pix4d/cogito

  - name: slack-notification
    type: docker-image
    source:
      repository: cfcommunity/slack-notification-resource